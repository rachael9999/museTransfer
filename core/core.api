syntax = "v1"

service core-api {
	// user login
	@handler UserLogin
	post /user/login (LoginRequest) returns (LoginReply)

	// user identity
	@handler UserDetail
	post /user/detail (UserDetailRequest) returns (UserDetailReply)

	@handler CoreHandler
	get /from/:name (Request) returns (Response)

	// send code
	@handler SendCodeRegister
	post /register/mail/sendCode (SendCodeRequest) returns (SendCodeResponse)

	// register user
	@handler RegisterUser
	post /register/user (RegisterUserRequest) returns (RegisterUserResponse)
}

@server (
	middleware: Auth
)
service core-api {
	// file upload
	@handler FileUpload
	post /file/upload (FileUploadRequest) returns (FileUploadResponse)

	// user file list
	@handler UserRepoSave
	post /user/repo/save (UserRepoSaveRequest) returns (UserRepoSaveResponse)

	// user file list
	@handler UserRepoList
	get /user/repo/list (UserRepoListRequest) returns (UserRepoListResponse)

	@handler UserFileNameUpdate
	post /user/file/name/update (UserFileNameUpdateRequest) returns (UserFileNameUpdateResponse)

	@handler UserFolderCreate
	post /user/folder/create (UserFolderCreateRequest) returns (UserFolderCreateResponse)

	@handler UserFileDelete
	post /user/file/delete (UserFileDeleteRequest) returns (UserFileDeleteResponse)
}

type LoginRequest {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type LoginReply {
	Token string `json:"token"`
	Error string `json:"error,omitempty"`
}

type UserDetailRequest {
	Identity string `json:"identity"`
}

type UserDetailReply {
	Name  string `json:"name"`
	Email string `json:"email"`
	Error string `json:"error,omitempty"`
}

type Request {
	Name string `path:"name,options=you|me"`
}

type Response {
	Message string `json:"message"`
}

type SendCodeRequest {
	Email string `json:"email"`
}

type SendCodeResponse {
	Error string `json:"error,omitempty"`
}

type RegisterUserRequest {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Code     string `json:"code"`
}

type RegisterUserResponse {
	Error string `json:"error,omitempty"`
}

type FileUploadRequest {
	Hash     string `json:"hash, optional"`
	Filename string `json:"filename, optional"`
	Ext      string `json:"ext, optional"`
	Size     int64  `json:"size, optional"`
	Path     string `json:"path, optional"`
}

type FileUploadResponse {
	Error    string `json:"error,omitempty"`
	Identity string `json:"identity"`
	Filename string `json:"filename"`
	Ext      string `json:"ext"`
}

type UserRepoSaveRequest {
	ParentId           int    `json:"parentId"`
	RepositoryIdentity string `json:"repositoryIdentity"`
	ext                string `json:"ext"`
	Filename           string `json:"filename"`
}

type UserRepoSaveResponse {
	Error    string `json:"error,omitempty"`
	Identity string `json:"identity"`
}

type UserRepoList {
	Id                 int    `json:"id"`
	Identity           string `json:"identity"`
	repositoryIdentity string `json:"repositoryIdentity"`
	Filename           string `json:"filename"`
	Ext                string `json:"ext"`
	Path               string `json:"path"`
	Size               int64  `json:"size"`
}

type UserRepoListRequest {
	Id   int `json:"id, optional"`
	Page int `json:"page, optional"`
	Size int `json:"size, optional"`
}

type UserRepoListResponse {
	Error string          `json:"error,omitempty"`
	Count int64           `json:"count"`
	List  []*UserRepoList `json:"list"`
}

type UserFileNameUpdateRequest {
	Identity string `json:"identity"`
	Filename string `json:"filename"`
}

type UserFileNameUpdateResponse {
	Error string `json:"error,omitempty"`
}

type UserFolderCreateRequest {
	ParentId int    `json:"parentId"`
	Filename string `json:"filename"`
}

type UserFolderCreateResponse {
	Error    string `json:"error,omitempty"`
	identity string `json:"identity"`
}

type UserFileDeleteRequest {
	Identity string `json:"identity"`
}

type UserFileDeleteResponse {
	Error string `json:"error,omitempty"`
}

